{"version":3,"sources":["api/index.tsx","store/index.ts","helpers/index.ts","components/Filters/Filters.tsx","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["request","url","a","fetch","response","ok","Error","status","json","getTodos","getUser","id","isLoading","state","loading","setLoading","type","value","setUser","user","setUserSelected","userSelected","isUserSelected","getListOfTodos","todos","getUserId","userId","getUserInfo","getSearchQuery","searchQuery","getFilterStatus","filterStatus","initialState","isUserError","store","createStore","action","applyMiddleware","thunk","filters","All","Active","Completed","Filters","filtersKeys","Object","keys","dispatch","useDispatch","useSelector","name","placeholder","onChange","event","setSearchQuery","target","setFilterStatus","map","filterKey","key","TodoList","areTodosLoading","filterByQuery","todo","title","toLowerCase","includes","filterByStatus","completed","filteredTodos","useMemo","length","filter","sortedTodos","className","classNames","readOnly","checked","onClick","CurrentUser","fetchUserData","then","data","catch","result","console","warn","message","setUserError","useEffect","email","phone","App","fetchTodos","setTodos","finally","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b171d8df.chunk.js","sourcesContent":["const BASE_URL = 'https://mate-api.herokuapp.com/';\n\nconst request = async (url: string) => {\n  const response = await fetch(BASE_URL + url);\n\n  if (!response.ok) {\n    throw new Error(`${response.status}`);\n  }\n\n  return response.json();\n};\n\nexport const getTodos = async () => {\n  const response = await request('todos/');\n\n  return response;\n};\n\nexport const getUser = async (id: number) => {\n  const response = await request('users/' + id);\n\n  return response;\n};\n","import { createStore, AnyAction, Dispatch, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { getTodos, getUser } from '../api';\nimport { Todo, RootState, User } from '../types';\n\n// Action types - is just a constant. MUST have a unique value.\nconst SET_LOADING = 'SET_LOADING';\nconst GET_TODOS = 'GET_TODOS';\nconst SET_USERID = 'SET_USERID';\nconst SET_USER = 'SET_USER';\nconst SET_USER_ERROR = 'SET_USER_ERROR';\nconst SET_USER_SELECTED = 'SET_USER_SELECTED';\nconst SET_SEARCH_QUERY = 'SET_INPUT_QUERY';\nconst SET_FILTER_STATUS = 'SET_FILTER_STATUS';\n\n// Action creators - a function returning an action object\nexport const isLoading = (state: RootState) => state.loading;\nexport const setLoading = (loading: boolean) => ({ type: SET_LOADING, value: loading });\nexport const setTodos = (todos: Todo[]) => ({ type: GET_TODOS, value: todos });\nexport const setUserId = (id: number) => ({ type: SET_USERID, value: id });\nexport const setUser = (user: User | null) => ({ type: SET_USER, value: user });\nexport const setUserError = (isUserError: boolean) => ({ type: SET_USER_ERROR, value: isUserError });\nexport const setUserSelected = (userSelected: boolean) => ({ type: SET_USER_SELECTED, value: userSelected });\nexport const setSearchQuery = (searchQuery: string) => ({ type: SET_SEARCH_QUERY, value: searchQuery });\nexport const setFilterStatus = (filterStatus: string) => ({ type: SET_FILTER_STATUS, value: filterStatus });\n\n// Selectors - a function receiving Redux state and returning some data from it\nexport const isUserError = (state: RootState) => state.isUserError;\nexport const isUserSelected = (state: RootState) => state.isUserSelected;\nexport const getListOfTodos = (state: RootState) => state.todos;\nexport const getTodoStatus = (state: RootState) => state.todos;\nexport const getUserId = (state: RootState) => state.userId;\nexport const getUserInfo = (state: RootState) => state.user;\nexport const getSearchQuery = (state: RootState) => state.searchQuery;\nexport const getFilterStatus = (state: RootState) => state.filterStatus;\n\n// Initial state\nexport const getTodosFromServer = () => {\n  return (dispatch: Dispatch) => {\n    getTodos()\n      .then(todos => {\n        dispatch(setTodos(todos.data));\n      })\n      .catch(result => {\n        console.warn(result.message);\n      })\n      .finally(() => {\n        dispatch(setLoading(false));\n      });\n  };\n};\n\nexport const getUserFromServer = (id: number) => {\n  return (dispatch: Dispatch) => {\n    getUser(id)\n      .then(user => {\n        dispatch(setUser(user.data));\n      })\n      .catch(result => {\n        console.warn('Failed loading user data.', result.message);\n        dispatch(setUserError(true));\n      });\n  };\n};\n\nconst initialState: RootState = {\n  todos: [],\n  user: null,\n  userId: 0,\n  isUserSelected: false,\n  isUserError: false,\n  searchQuery: '',\n  filterStatus: '',\n  loading: false\n};\n\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case GET_TODOS:\n      return {\n        ...state,\n        todos: [...action.value],\n      };\n\n    case SET_LOADING:\n      return {\n        ...state,\n        loading: action.value\n      };\n\n    case SET_USERID:\n      return {\n        ...state,\n        userId: action.value,\n      };\n\n    case SET_USER:\n      return {\n        ...state,\n        user: action.value,\n      };\n\n    case SET_USER_SELECTED:\n      return {\n        ...state,\n        isUserSelected: action.value,\n      };\n\n    case SET_USER_ERROR:\n      return {\n        ...state,\n        isUserError: action.value,\n      };\n\n    case SET_SEARCH_QUERY:\n      return {\n        ...state,\n        searchQuery: action.value,\n      };\n    case SET_FILTER_STATUS:\n      return {\n        ...state,\n        filterStatus: action.value,\n      };\n\n    default:\n      return state;\n  }\n};\n\n// The `store` should be passed to the <Provider store={store}> in `/src/index.tsx`\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunk),\n);\n\nexport default store;\n","import { Filter } from '../types';\n\nexport const filters: Filter = {\n  All: 'All',\n  Active: 'Active',\n  Completed: 'Completed',\n};\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { filters } from '../../helpers';\n\nimport {\n  setSearchQuery,\n  getSearchQuery,\n  setFilterStatus,\n  getFilterStatus\n} from '../../store';\n\nexport const Filters = () => {\n  const filtersKeys = Object.keys(filters);\n  const dispatch = useDispatch();\n  const searchQuery = useSelector(getSearchQuery);\n  const filterStatus = useSelector(getFilterStatus);\n\n  return (\n    <form>\n      <input\n        type=\"text\"\n        name=\"filterTitle\"\n        value={searchQuery}\n        placeholder=\"filter todos\"\n        onChange={(event) => {\n          dispatch(setSearchQuery(event.target.value));\n        }}\n      />\n      <select\n        name=\"filterStatus\"\n        value={filterStatus}\n        onChange={(event) => {\n          dispatch(setFilterStatus(event.target.value));\n        }}\n      >\n        {filtersKeys.map(filterKey => (\n          <option key={filterKey}>{filters[filterKey]}</option>\n        ))}\n      </select>\n    </form>\n  );\n};\n","import React, { useMemo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Todo } from '../../types';\nimport { Filters } from '../Filters';\nimport classNames from 'classnames';\n\nimport {\n  getListOfTodos,\n  setUserId,\n  setUserSelected,\n  getSearchQuery,\n  getFilterStatus,\n  isLoading\n} from '../../store';\n\nimport { filters } from '../../helpers';\n\nimport './TodoList.scss';\n\nexport const TodoList = () => {\n  const todos: Todo[] = useSelector(getListOfTodos);\n  const dispatch = useDispatch();\n  const searchQuery = useSelector(getSearchQuery);\n  const filterStatus = useSelector(getFilterStatus);\n  const areTodosLoading: boolean = useSelector(isLoading);\n\n  const filterByQuery = (todo: Todo) => {\n    if (todo.title !== null) {\n      return todo.title.toLowerCase()\n        .includes(searchQuery.toLowerCase());\n    }\n\n    return null;\n  };\n\n  const filterByStatus = (todo: Todo) => {\n    switch (filterStatus) {\n      case filters.Completed:\n        return todo.completed;\n      case filters.Active:\n        return !todo.completed;\n      default:\n        return true;\n    }\n  };\n\n  const filteredTodos = useMemo(() => {\n    if (!searchQuery.length) {\n      return todos;\n    }\n\n    return todos.filter(filterByQuery);\n  }, [todos, searchQuery]);\n\n  const sortedTodos = useMemo(() => {\n    return filteredTodos.filter(filterByStatus);\n  }, [filteredTodos, filterStatus]);\n\n  return (\n    <div className=\"TodoList\">\n      <h3>Todos:</h3>\n      {areTodosLoading ? (\n        <p className=\"info\">Loading...</p>\n      ) : (\n        <div className=\"TodoList__list-container\">\n          <Filters />\n          <ul className=\"TodoList__list\">\n            {sortedTodos.map((todo: Todo) => (\n              <li key={todo.id}\n                className={classNames('TodoList__item', {\n                  'TodoList__item--unchecked': !todo.completed,\n                  'TodoList__item--checked': todo.completed,\n                })}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    readOnly\n                    checked={todo.completed}\n                  />\n                  <p>{todo.title}</p>\n                </label>\n                <button\n                  type=\"button\"\n                  onClick={() => {\n                    dispatch(setUserId(todo.userId));\n                    dispatch(setUserSelected(true));\n                  }}\n                >\n                  User&nbsp;\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n","import React, { useEffect, FC } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { User } from '../../types';\n\nimport {\n  getUserId,\n  setUserSelected,\n  getUserFromServer,\n  getUserInfo,\n  setUser\n} from '../../store';\nimport './CurrentUser.scss';\n\nexport const CurrentUser: FC = () => {\n\n  const dispatch = useDispatch();\n\n  const user: User | null = useSelector(getUserInfo);\n  const userId: number = useSelector(getUserId);\n\n  const fetchUserData = () => {\n    return dispatch(getUserFromServer(userId));\n  };\n\n  useEffect(() => {\n    if (userId && userId > 0) {\n      fetchUserData();\n    }\n  }, [userId]);\n\n  const clearUser = () => {\n    dispatch(setUser(null));\n    dispatch(setUserSelected(false));\n  }\n\n  if (!user) {\n    return (\n      <p className=\"warning pl-30\">Loading user data has failed.</p>\n    )\n  } else {\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            {`Selected user with ID ${userId}`}\n          </span>\n        </h2>\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={clearUser}\n        >\n          Clear user\n        </button>\n      </div>\n    );\n  }\n}\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport './App.scss';\nimport { getTodosFromServer, isUserSelected, setLoading } from './store';\n\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\n\nconst App = () => {\n  const dispatch = useDispatch();\n\n  const userSelected: boolean = useSelector(isUserSelected);\n\n  const fetchTodos = () => {\n    dispatch(setLoading(true));\n    return dispatch(getTodosFromServer());\n  };\n\n  useEffect(() => {\n    fetchTodos();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList />\n      </div>\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {userSelected ? (\n            <CurrentUser />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nimport store from './store';\r\nimport App from './App';\r\n\r\n// Just a convenient component with all the wrappers for the `App`\r\n// The Router component (if you use it) should be placed inside the Provider\r\nconst Root = () => (\r\n  <Provider store={store}>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </Provider>\r\n);\r\n\r\nReactDOM.render(<Root />, document.getElementById('root'));\r\n"],"sourceRoot":""}